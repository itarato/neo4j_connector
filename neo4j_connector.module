<?php
/**
 * @file
 * Main module functions.
 */

use Drupal\neo4j_connector\Neo4JDrupal;
use Drupal\neo4j_connector\Neo4JDrupalIndexStat;
use Drupal\neo4j_connector\Index;

/**
 * Workaround to load the Neo4J PHP library. I've tried to use composer_manager module, but keeping Drupal8 core
 * up to date and the module without problems seemed impossible.
 * @todo fix ugly loading when there is a standard way of handling composer libraries in Drupal 8.
 */
require_once __DIR__ . '/vendor/autoload.php';

// Index names.
define('NEO4J_CONNECTOR_ENTITY_INDEX_PREFIX', 'entity_index_');

// Limit of items to process during reindex batch op.
define('NEO4J_CONNECTOR_REINDEX_LIMIT', 100);

/**
 * Neo4J Drupal service getter shortcut.
 *
 * @return Neo4JDrupal
 */
function neo4j_connector_get_client() {
  return \Drupal::service('neo4j_connector');
}

/**
 * @return Index
 */
function neo4j_connector_get_index() {
  return \Drupal::service('neo4j_connector.index');
}

/**
 * Implements hook_permission().
 */
function neo4j_connector_permission() {
  return array(
    'access neo4j graph information' => array(
      'title' => t('Access Neo4J graph information'),
      'description' => t('Access to the graph data regarding the Drupal content.'),
    ),
    'administer neo4j connector configuration' => array(
      'title' => t('Administer Neo4J connection'),
      'description' => t('Administer global settings for the graph database.'),
    ),
  );
}

/**
 * Implements hook_cron_queue_info().
 */
function neo4j_connector_cron_queue_info() {
  return array(
    'neo4j_connector_node_regenerate' => array(
      'worker callback' => 'neo4j_connector_queue_node_regenerate_worker',
      'time' => 120,
    ),
    'neo4j_connector_user_regenerate' => array(
      'worker callback' => 'neo4j_connector_queue_user_regenerate_worker',
      'time' => 120,
    ),
  );
}

/**
 * Batch callback for indexing.
 * @see Neo4JIndexForm
 */
function _neo4j_connector_batch_op_reindex(&$context) {
  if (empty($context['sandbox'])) {
    $context['sandbox']['total'] = Neo4JDrupalIndexStat::getNotIndexed();
  }

  neo4j_connector_get_index()->processIndex();

  $not_indexed_count = Neo4JDrupalIndexStat::getNotIndexed();
  $context['message'] = t('@count item(s) left.', array('@count' => $not_indexed_count));
  $finished = $not_indexed_count == 0 ? 1 : $not_indexed_count / $context['sandbox']['total'];
  $context['finished'] = $finished;
}

/**
 * Implements hook_cron().
 */
function neo4j_connector_cron() {
  neo4j_connector_get_index()->processIndex();
}

/**
 * Delete all graph data.
 */
function neo4j_connector_purge_db() {
  // Delete all relationships.
  Neo4JDrupal::sharedInstance()->query("
    START n = node(*)
    MATCH (n)-[r]->()
    DELETE r
  ");

  // Delete all nodes.
  Neo4JDrupal::sharedInstance()->query("
    START n = node(*)
    DELETE n
  ");

  neo4j_connector_get_index()->deleteAll();
}

/**
 * Loads index info for a given index. (Such as the entity index.)
 *
 * @param $index_name
 *  Name of the index.
 * @return array
 *
 * @see neo4j_connector_index_info()
 */
function neo4j_connector_index_info_load($index_name) {
  $index_info = neo4j_connector_index_info();
  return $index_info[$index_name];
}

/**
 * Get all index information available.
 *
 * @return array
 */
function neo4j_connector_index_info() {
  static $index_info = NULL;

  if (!$index_info) {
    $index_info = \Drupal::moduleHandler()->invokeAll('neo4j_connector_index_info');
  }

  return $index_info;
}
