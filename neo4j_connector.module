<?php
/**
 * @file
 * Main module functions.
 */

use Drupal\Core\Entity\EntityInterface;
use Drupal\neo4j_connector\Neo4JDrupal;
use Drupal\neo4j_connector\Neo4JDrupalIndexParam;

require_once __DIR__ . '/neo4j_connector.index.inc';

// Index names.
define('NEO4J_CONNECTOR_ENTITY_INDEX_PREFIX', 'entity_index_');

// Limit of items to process during reindex batch op.
define('NEO4J_CONNECTOR_REINDEX_LIMIT', 100);

/**
 * Implements hook_menu().
 */
function neo4j_connector_menu() {
  return array(
    // Neo4J admin section.
    'admin/config/neo4j' => array(
      'title' => 'Neo4J',
      'description' => 'Administration tools.',
      'route_name' => 'neo4j_connector.admin',
    ),

    // Regenerate nodes / users.
    'admin/config/neo4j/settings' => array(
      'title' => 'Admin settings',
      'description' => t('Neo4J settings'),
      'route_name' => 'neo4j_connector.settings',
    ),

    // 'Eval' console.
    'admin/config/neo4j/console' => array(
      'title' => 'Console',
      'description' => t('DB console'),
      'route_name' => 'neo4j_connector.console',
    ),
  );
}

/**
 * Implements hook_admin_paths().
 */
function neo4j_connector_admin_paths() {
  return array(
    'admin/config/neo4j/console' => TRUE,
    'admin/config/neo4j/settings' => TRUE,
    'admin/config/neo4j' => TRUE,
    'node/*/graph' => TRUE,
    'user/*/graph' => TRUE,
    'taxonomy/term/*/graph' => TRUE,
  );
}

/**
 * Implement hook_entity_insert().
 */
function neo4j_connector_entity_insert(EntityInterface $entity) {
  neo4j_connector_index_send_to_index($entity->entityType(), $entity->id());
}

/**
 * Implement hook_entity_update().
 */
function neo4j_connector_entity_update(EntityInterface $entity) {
  neo4j_connector_index_send_to_index($entity->entityType(), $entity->id());
}

/**
 * Implement hook_entity_delete().
 */
function neo4j_connector_entity_delete(EntityInterface $entity) {
  $indexParam = new Neo4JDrupalIndexParam(NEO4J_CONNECTOR_ENTITY_INDEX_PREFIX . $entity->entityType(), 'entity_id', $entity->id());
  Neo4JDrupal::sharedInstance()->deleteEntity($entity, $entity->entityType(), $indexParam);

  neo4j_connector_index_delete($entity->entityType(), $entity->id());
}

/**
 * Implements hook_permission().
 */
function neo4j_connector_permission() {
  return array(
    'access neo4j graph information' => array(
      'title' => t('Access Neo4J graph information'),
      'description' => t('Access to the graph data regarding the Drupal content.'),
    ),
    'administer neo4j connector configuration' => array(
      'title' => t('Administer Neo4J connection'),
      'description' => t('Administer global settings for the graph database.'),
    ),
  );
}

/**
 * @param $entity
 * @param $type
 *
 * @return \Everyman\Neo4j\Node
 */
function neo4j_connector_add_entity_to_neo4j(EntityInterface $entity, $type, $include_fields = TRUE) {
  $indexParam = new Neo4JDrupalIndexParam(NEO4J_CONNECTOR_ENTITY_INDEX_PREFIX . $type, 'entity_id', $entity->id());

  $properties = array();
  \Drupal::moduleHandler()->alter('neo4j_connector_entity_properties', $properties, $entity, $type);

  return Neo4JDrupal::sharedInstance()->addEntity($entity, $properties, $indexParam, $include_fields);
}

/**
 * Helper function to collect graph node properties of a node to store.
 *
 * @param $entity
 *  Node object.
 * @return array
 *  Property key value array.
 */
function neo4j_connector_neo4j_connector_entity_properties_alter(&$properties, EntityInterface $entity, $entity_type) {
  switch ($entity_type) {
    case 'node':
      $properties['title'] = $entity->title[0]->getValue()['value'];
      break;

    case 'user':
      $properties['name'] = $entity->name[0]->getValue()['value'];
      $properties['mail'] = $entity->mail[0]->getValue()['value'];
      break;
  }

  $properties['entity_id'] = $entity->id();
  $properties['entity_type'] = $entity_type;
  $properties['bundle'] = $entity->bundle();
}

/**
 * Implements hook_cron_queue_info().
 */
function neo4j_connector_cron_queue_info() {
  return array(
    'neo4j_connector_node_regenerate' => array(
      'worker callback' => 'neo4j_connector_queue_node_regenerate_worker',
      'time' => 120,
    ),
    'neo4j_connector_user_regenerate' => array(
      'worker callback' => 'neo4j_connector_queue_user_regenerate_worker',
      'time' => 120,
    ),
  );
}

function _neo4j_connector_batch_op_mark_for_index($entity_type, $entity_id_key, &$context) {
  if (empty($context['sandbox'])) {
    $context['sandbox']['progress'] = 0;

    $count_query = \Drupal::entityQuery($entity_type);
    $context['sandbox']['count'] = $count_query->count()->execute();
  }

  // @todo add not-in-() using the existing indexed ids.

  $query = \Drupal::entityQuery($entity_type);
  $query->range($context['sandbox']['progress'], NEO4J_CONNECTOR_REINDEX_LIMIT);
  $query->sort($entity_id_key);
  $result = $query->execute();

  foreach ($result as $entity_id) {
    neo4j_connector_index_send_to_index($entity_type, $entity_id);
    $context['sandbox']['progress']++;
  }

  $context['message'] = t('@current out of @total @type entity have been marked in the index.', array(
    '@current' => $context['sandbox']['progress'],
    '@total' => $context['sandbox']['count'],
    '@type' => $entity_type,
  ));
  $finished = $context['sandbox']['count'] == 0 ? 1 : $context['sandbox']['progress'] / $context['sandbox']['count'];
  $context['finished'] = $finished;
}

function _neo4j_connector_batch_op_reindex(&$context) {
  if (empty($context['sandbox'])) {
    $index_stat = neo4j_connector_index_get_stat();
    $context['sandbox']['total'] = $index_stat['non-indexed'];
  }

  neo4j_connector_index_process_index();

  $index_stat = neo4j_connector_index_get_stat();

  $context['message'] = t('@count item(s) left.', array('@count' => $index_stat['non-indexed']));
  $finished = $index_stat['non-indexed'] == 0 ? 1 : $index_stat['non-indexed'] / $context['sandbox']['total'];
  $context['finished'] = $finished;
}

/**
 * @param $entity_type
 * @param $entity_id
 *
 * @return \Everyman\Neo4j\Node|FALSE
 */
function neo4j_connector_send_to_index_without_fields($entity_type, $entity_id) {
  $entity = entity_load($entity_type, $entity_id);
  $node = neo4j_connector_add_entity_to_neo4j($entity, $entity_type, FALSE);

  if ($node) {
    _neo4j_connector_index_mark($entity_type, $entity_id, NEO4J_CONNECTOR_INDEX_STATUS_UPDATE);
    return $node;
  }
  else {
    watchdog(__FUNCTION__, 'Graph node could not be created. Type: @type id: @id.', array('@type' => $entity_type, '@id' => $entity_id), WATCHDOG_ERROR);
  }

  return FALSE;
}

/**
 * Implements hook_cron().
 */
function neo4j_connector_cron() {
  if (!class_exists('Everyman\Neo4j\Client')) {
    composer_manager_register_autoloader();
  }
  neo4j_connector_index_process_index();
}

function neo4j_connector_purge_db() {
  // Delete all relationships.
  Neo4JDrupal::sharedInstance()->query("
    START n = node(*)
    MATCH (n)-[r]->()
    DELETE r
  ");

  // Delete all nodes.
  Neo4JDrupal::sharedInstance()->query("
    START n = node(*)
    DELETE n
  ");

  neo4j_connector_index_delete_all();
}

function neo4j_connector_send_content_to_index() {
  $entity_types = Drupal::entityManager()->getDefinitions();

  $operations = array();
  foreach ($entity_types as $type => $info) {
    if (!isset($info['entity_keys']['id'])) {
      // If there is no id entity key than it's probably not for querying. (via entity query)
      // @todo keep an eye on it - maybe there will be a D8 solution sometime.
      continue;
    }
    $operations[] = array('_neo4j_connector_batch_op_mark_for_index', array($type, $info['entity_keys']['id']));
  }

  $batch = array(
    'operations' => $operations,
    'title' => 'Re-indexing entities',
  );

  batch_set($batch);
}
