<?php
/**
 * @file
 * Main module functions.
 */

require_once __DIR__ . '/vendor/autoload.php';

// Index names.
define('NEO4J_CONNECTOR_ENTITY_INDEX_PREFIX', 'entity_index_');

/**
 * Implements hook_menu().
 */
function neo4j_connector_menu() {
  return array(
    // Drupal entity tabs.
    'node/%node/graph' => array(
      'type' => MENU_LOCAL_TASK,
      'title' => 'Graph info',
      'page callback' => 'neo4j_connector_node_graph_info_page',
      'page arguments' => array(1),
      'file' => 'neo4j_connector.pages.inc',
      'access callback' => TRUE,
    ),
    'user/%user/graph' => array(
      'type' => MENU_LOCAL_TASK,
      'title' => 'Graph info',
      'page callback' => 'neo4j_connector_user_graph_info_page',
      'page arguments' => array(1),
      'file' => 'neo4j_connector.pages.inc',
      'access callback' => TRUE,
    ),
    'taxonomy/term/%taxonomy_term/graph' => array(
      'type' => MENU_LOCAL_TASK,
      'title' => 'Graph info',
      'page callback' => 'neo4j_connector_term_graph_info_page',
      'page arguments' => array(2),
      'file' => 'neo4j_connector.pages.inc',
      'access callback' => TRUE,
    ),

    // Neo4J admin section.
    'admin/config/neo4j' => array(
      'title' => 'Neo4J',
      'description' => 'Administration tools.',
      'page callback' => 'system_admin_menu_block_page',
      'access arguments' => array('access administration pages'),
      'file' => 'system.admin.inc',
      'file path' => drupal_get_path('module', 'system'),
    ),

    // Regenerate nodes / users.
    'admin/config/neo4j/settings' => array(
      'title' => 'Admin settings',
      'page callback' => 'neo4j_connector_admin_settings_page',
      'file' => 'neo4j_connector.pages.inc',
      'access callback' => TRUE,
      'description' => t('Neo4J settings'),
    ),

    // 'Eval' console.
    'admin/config/neo4j/console' => array(
      'title' => 'Console',
      'page callback' => 'neo4j_connector_console_page',
      'file' => 'neo4j_connector.pages.inc',
      'access callback' => TRUE,
      'description' => t('DB console'),
    ),
  );
}

function neo4j_connector_entity_insert($entity, $type) {
  neo4j_connector_index_add_to_index($entity, $type);
}

function neo4j_connector_entity_update($entity, $type) {
  neo4j_connector_index_add_to_index($entity, $type);
}

function neo4j_connector_entity_delete($entity, $type) {
  neo4j_connector_index_remove_from_index($type, $entity);
}

/**
 * @param $entity
 * @param $type
 *
 * @return \Everyman\Neo4j\Node
 */
function neo4j_connector_add_entity_to_neo4j($entity, $type) {
  list($id, ,) = entity_extract_ids($type, $entity);
  $indexParam = new Neo4JDrupalIndexParam(NEO4J_CONNECTOR_ENTITY_INDEX_PREFIX . $type, 'entity_id', $id);

  $properties = array();
  drupal_alter('neo4j_connector_entity_properties', $properties, $entity, $type);

  return Neo4JDrupal::sharedInstance()->addEntity($entity, $type, $properties, $indexParam);
}

/**
 * Helper function to collect graph node properties of a node to store.
 *
 * @param $entity
 *  Node object.
 * @return array
 *  Property key value array.
 */
function neo4j_connector_neo4j_connector_entity_properties_alter(&$properties, $entity, $entity_type) {
  list($id, $vid, $bundle) = entity_extract_ids($entity_type, $entity);
  switch ($entity_type) {
    case 'node':
      $properties['title'] = $entity->title;
      break;

    case 'user':
      $properties['name'] = $entity->name;
      $properties['mail'] = $entity->mail;
      break;
  }

  $properties['entity_id'] = $id;
  $properties['entity_vid'] = $vid;
  $properties['entity_type'] = $entity_type;
  $properties['bundle'] = $bundle;
}

/**
 * Implements hook_cron_queue_info().
 */
function neo4j_connector_cron_queue_info() {
  return array(
    'neo4j_connector_node_regenerate' => array(
      'worker callback' => 'neo4j_connector_queue_node_regenerate_worker',
      'time' => 120,
    ),
    'neo4j_connector_user_regenerate' => array(
      'worker callback' => 'neo4j_connector_queue_user_regenerate_worker',
      'time' => 120,
    ),
  );
}

/**
 * Queue worker callback for the node regeneration queue.
 *
 * @see neo4j_connector_cron_queue_info()
 */
function neo4j_connector_queue_node_regenerate_worker($nids) {
  foreach ($nids as $nid) {
    $node = node_load($nid);
    neo4j_connector_add_entity_to_neo4j($node, 'node');
  }
}

/**
 * Queue worker callback for the user regeneration queue.
 *
 * @see neo4j_connector_cron_queue_info()
 */
function neo4j_connector_queue_user_regenerate_worker($uids) {
  foreach ($uids as $uid) {
    $account = user_load($uid);
    neo4j_connector_add_entity_to_neo4j($account, 'user');
  }
}
