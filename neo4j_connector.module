<?php
/**
 * @file
 * Main module functions.
 */

use Drupal\Core\Entity\EntityInterface;
use Drupal\neo4j_connector\Neo4JDrupal;
use Drupal\neo4j_connector\Neo4JDrupalIndexParam;
use Drupal\neo4j_connector\Neo4JDrupalIndexStat;

require_once DRUPAL_ROOT . '/sites/all/vendor/autoload.php';

require_once __DIR__ . '/neo4j_connector.index.inc';

// Index names.
define('NEO4J_CONNECTOR_ENTITY_INDEX_PREFIX', 'entity_index_');

// Limit of items to process during reindex batch op.
define('NEO4J_CONNECTOR_REINDEX_LIMIT', 100);

///**
// * Implements hook_menu_link_defaults().
// */
//function neo4j_connector_menu_link_defaults() {
//  $items = array();
//
//  // Neo4J admin section.
//  $items['neo4j_connector.admin.config.neo4j_connector'] = array(
//    'link_title' => 'Neo4J',
//    'description' => 'Administration tools.',
//    'route_name' => 'neo4j_connector.admin',
//    'parent' => 'system.admin.config',
//    'menu_name' => 'admin',
//  );
//
//  // Global settings.
//  $items['neo4j_connector.admin.config.neo4j_connector.general'] = array(
//    'link_title' => 'Admin settings',
//    'description' => 'Neo4J settings',
//    'route_name' => 'neo4j_connector.settings',
//    'parent' => 'neo4j_connector.admin.config.neo4j_connector',
//  );
//
//  // Index.
//  $items['neo4j_connector.admin.config.neo4j_connector.index'] = array(
//    'link_title' => 'Index',
//    'description' => 'Index listing, flush and regeneration.',
//    'route_name' => 'neo4j_connector.index',
//    'parent' => 'neo4j_connector.admin.config.neo4j_connector',
//  );
//
//  // 'Eval' console.
//  $items['neo4j_connector.admin.config.neo4j_connector.console'] = array(
//    'link_title' => 'Console',
//    'description' => 'DB console',
//    'route_name' => 'neo4j_connector.console',
//    'parent' => 'neo4j_connector.admin.config.neo4j_connector',
//  );
//
//  return $items;
//}

/**
 * Implements hook_admin_paths().
 */
function neo4j_connector_admin_paths() {
  return array(
    'admin/config/neo4j/console' => TRUE,
    'admin/config/neo4j/settings' => TRUE,
    'admin/config/neo4j' => TRUE,
    'node/*/graph' => TRUE,
    'user/*/graph' => TRUE,
    'taxonomy/term/*/graph' => TRUE,
  );
}

/**
 * @return Neo4JDrupal
 */
function neo4j_connector_get_client() {
  return \Drupal::service('neo4j_connector');
}

/**
 * Implements hook_permission().
 */
function neo4j_connector_permission() {
  return array(
    'access neo4j graph information' => array(
      'title' => t('Access Neo4J graph information'),
      'description' => t('Access to the graph data regarding the Drupal content.'),
    ),
    'administer neo4j connector configuration' => array(
      'title' => t('Administer Neo4J connection'),
      'description' => t('Administer global settings for the graph database.'),
    ),
  );
}

/**
 * Implements hook_cron_queue_info().
 */
function neo4j_connector_cron_queue_info() {
  return array(
    'neo4j_connector_node_regenerate' => array(
      'worker callback' => 'neo4j_connector_queue_node_regenerate_worker',
      'time' => 120,
    ),
    'neo4j_connector_user_regenerate' => array(
      'worker callback' => 'neo4j_connector_queue_user_regenerate_worker',
      'time' => 120,
    ),
  );
}

function _neo4j_connector_batch_op_reindex(&$context) {
  if (empty($context['sandbox'])) {
    $context['sandbox']['total'] = Neo4JDrupalIndexStat::getNotIndexed();
  }

  neo4j_connector_index_process_index();

  $not_indexed_count = Neo4JDrupalIndexStat::getNotIndexed();
  $context['message'] = t('@count item(s) left.', array('@count' => $not_indexed_count));
  $finished = $not_indexed_count == 0 ? 1 : $not_indexed_count / $context['sandbox']['total'];
  $context['finished'] = $finished;
}

/**
 * Implements hook_cron().
 */
function neo4j_connector_cron() {
  if (!class_exists('Everyman\Neo4j\Client')) {
    composer_manager_register_autoloader();
  }
  neo4j_connector_index_process_index();
}

function neo4j_connector_purge_db() {
  // Delete all relationships.
  Neo4JDrupal::sharedInstance()->query("
    START n = node(*)
    MATCH (n)-[r]->()
    DELETE r
  ");

  // Delete all nodes.
  Neo4JDrupal::sharedInstance()->query("
    START n = node(*)
    DELETE n
  ");

  neo4j_connector_index_delete_all();
}

function neo4j_connector_index_load($index) {
  $index_info = neo4j_connector_index_info();
  return $index_info[$index];
}

/**
 * @return array
 */
function neo4j_connector_index_info() {
  static $index_info = NULL;

  if (!$index_info) {
    $index_info = \Drupal::moduleHandler()->invokeAll('neo4j_connector_index_info');
  }

  return $index_info;
}
