<?php
/**
 * @file
 * Entity index handlers.
 */

use Drupal\Core\Entity\EntityInterface;
use Drupal\field\Field;
use Drupal\neo4j_connector\Neo4JDrupalIndexParam;
use Drupal\neo4j_entity_index\Neo4JDrupalFieldHandlerFactory;

// Index domain name.
define('NEO4J_ENTITY_INDEX_DOMAIN', 'entity');

/**
 * Implements hook_neo4j_connector_index_info().
 */
function neo4j_entity_index_neo4j_connector_index_info() {
  return array(
    NEO4J_ENTITY_INDEX_DOMAIN => array(
      'label' => t('Entity index'),
      'index marker callback' => 'neo4j_entity_index_mark_for_index',
      'index param callback' => 'neo4j_entity_index_get_index_param',
      'settings path' => '/admin/config/neo4j_entity_index/settings',
    ),
  );
}

/**
 * Implement hook_entity_insert().
 */
function neo4j_entity_index_entity_insert(EntityInterface $entity) {
  if (!neo4j_entity_index_is_indexable_type($entity->getEntityTypeId())) {
    return;
  }

  neo4j_connector_index_mark_for_index(NEO4J_ENTITY_INDEX_DOMAIN, "{$entity->getEntityTypeId()}:{$entity->id()}");
}

/**
 * Implement hook_entity_update().
 */
function neo4j_entity_index_entity_update(EntityInterface $entity) {
  if (!neo4j_entity_index_is_indexable_type($entity->getEntityTypeId())) {
    return;
  }

  neo4j_connector_index_mark_for_index(NEO4J_ENTITY_INDEX_DOMAIN, "{$entity->getEntityTypeId()}:{$entity->id()}");
}

/**
 * Implement hook_entity_delete().
 */
function neo4j_entity_index_entity_delete(EntityInterface $entity) {
  $indexParam = new Neo4JDrupalIndexParam(NEO4J_CONNECTOR_ENTITY_INDEX_PREFIX . $entity->getEntityTypeId(), 'entity_id', $entity->id());
  neo4j_connector_get_client()->deleteNode($indexParam);
  neo4j_connector_index_delete(NEO4J_ENTITY_INDEX_DOMAIN, "{$entity->getEntityTypeId()}:{$entity->id()}");
}

/**
 * Implements hook_neo4j_connector_properties_alter().
 */
function neo4j_entity_index_neo4j_connector_properties_alter(array &$properties, $domain, $id) {
  if ($domain != NEO4J_ENTITY_INDEX_DOMAIN) {
    return;
  }

  $entity = neo4j_entity_index_get_entity_by_index_id($id);

  switch ($entity->getEntityTypeId()) {
    case 'node':
      $properties['title'] = $entity->title[0]->getValue()['value'];
      break;

    case 'user':
      $properties['title'] = $entity->name[0]->getValue()['value'];
      $properties['mail'] = $entity->mail[0]->getValue()['value'];
      break;

    case 'taxonomy_term':
      $properties['title'] = $entity->name->value;
      break;
  }

  $properties['entity_id'] = $entity->id();
  $properties['entity_type'] = $entity->getEntityTypeId();
  $properties['entity_bundle'] = $entity->bundle();
}

/**
 * Implements hook_neo4j_connector_labels_alter().
 */
function neo4j_entity_index_neo4j_connector_labels_alter(array &$labels, $domain, $id) {
  if ($domain != NEO4J_ENTITY_INDEX_DOMAIN) {
    return;
  }

  $entity = neo4j_entity_index_get_entity_by_index_id($id);

  $labels[] = $entity->getEntityTypeId();
}

/**
 * Indexer callback.
 * @see neo4j_entity_index_neo4j_connector_index_info()
 */
function neo4j_entity_index_mark_for_index() {
  $entity_types = \Drupal::entityManager()->getDefinitions();

  $operations = array();
  foreach ($entity_types as $type => $info) {
    if (!neo4j_entity_index_is_indexable_type($type)) {
      // Not set for index.
      continue;
    }

    if (!$info->getKey('id')) {
      // If there is no id entity key than it's probably not for querying. (via entity query)
      // @todo keep an eye on it - maybe there will be a D8 solution sometime.
      continue;
    }
    $operations[] = array('neo4j_entity_index_batch_op_mark_for_index', array($type, $info->getKey('id')));
  }

  $batch = array(
    'operations' => $operations,
    'title' => 'Re-indexing entities',
  );

  batch_set($batch);
}

/**
 * Batch callback for indexer.
 *
 * @param $entity_type
 *  Entity type to index.
 * @param $entity_id_key
 *  Property name that holds the entity id. Used for sorting.
 * @param $context
 *  Batch context.
 */
function neo4j_entity_index_batch_op_mark_for_index($entity_type, $entity_id_key, &$context) {
  if (empty($context['sandbox'])) {
    $context['sandbox']['progress'] = 0;

    $count_query = \Drupal::entityQuery($entity_type);
    $context['sandbox']['count'] = $count_query->count()->execute();
  }

  // @todo add not-in-() using the existing indexed ids.

  $query = \Drupal::entityQuery($entity_type);
  $query->range($context['sandbox']['progress'], NEO4J_CONNECTOR_REINDEX_LIMIT);
  $query->sort($entity_id_key);
  $result = $query->execute();

  foreach ($result as $entity_id) {
    neo4j_connector_index_mark_for_index('entity', "$entity_type:$entity_id");
    $context['sandbox']['progress']++;
  }

  $context['message'] = t('@current out of @total @type entity have been marked in the index.', array(
    '@current' => $context['sandbox']['progress'],
    '@total' => $context['sandbox']['count'],
    '@type' => $entity_type,
  ));
  $finished = $context['sandbox']['count'] == 0 ? 1 : $context['sandbox']['progress'] / $context['sandbox']['count'];
  $context['finished'] = $finished;
}

/**
 * Index param resolver callback - creates index param from index domain and ID.
 *
 * @param $domain
 *  Index domain.
 * @param $id
 *  Index ID.
 * @return Neo4JDrupalIndexParam
 */
function neo4j_entity_index_get_index_param($domain, $id) {
  list($entity_type, $entity_id) = explode(':', $id);
  return new \Drupal\neo4j_connector\Neo4JDrupalIndexParam(NEO4J_CONNECTOR_ENTITY_INDEX_PREFIX . $entity_type, 'entity_id', $entity_id);
}

/**
 * Implements hook_neo4j_connector_graph_node_update().
 */
function neo4j_entity_index_neo4j_connector_graph_node_update(\Everyman\Neo4j\Node $graph_node, $domain, $id) {
  $entity = neo4j_entity_index_get_entity_by_index_id($id);

  $field_instances = Field::fieldInfo()->getBundleInstances($entity->getEntityTypeId(), $entity->bundle());
  foreach ($field_instances as $field_instance) {
    $field_info = Field::fieldInfo()->getField($entity->getEntityTypeId(), $field_instance->field_name);
    if ($neo4jFieldHandler = Neo4JDrupalFieldHandlerFactory::getInstance($field_info, $graph_node)) {
      $neo4jFieldHandler->processFieldData($entity, $field_instance->field_name);
    }
  }

  if ($entity->getEntityTypeId() == 'node') {
    // Connect to author.
    if ($uid = $entity->uid->value) {
      $client = neo4j_connector_get_client();
      $index_param = neo4j_entity_index_get_index_param(NEO4J_ENTITY_INDEX_DOMAIN, "user:$uid");
      $client->connectOrCreate($graph_node, $index_param, NEO4J_ENTITY_INDEX_DOMAIN, "user:$uid", 'author');
    }
  }
}

/**
 * Return entity by index ID.
 *
 * @param $id
 *  Index ID.
 * @return \Drupal\Core\Entity\EntityInterface
 */
function neo4j_entity_index_get_entity_by_index_id($id) {
  list($entity_type, $entity_id) = explode(':', $id);
  return entity_load($entity_type, $entity_id);
}

/**
 * Fetch the corresponding graph not of an entity.
 *
 * @param $entity_type
 *  Entity type.
 * @param $entity_id
 *  Entity ID.
 * @return bool|\Everyman\Neo4j\Node
 */
function neo4j_entity_index_get_graph_node_for_type_and_id($entity_type, $entity_id) {
  $index_param = new Neo4JDrupalIndexParam(NEO4J_CONNECTOR_ENTITY_INDEX_PREFIX . $entity_type, 'entity_id', $entity_id);
  return neo4j_connector_get_client()->getGraphNodeOfIndex($index_param);
}

/**
 * Check if the entity type is set to index in the configuration.
 *
 * @param $entity_type
 *  Entity type string.
 * @return bool
 */
function neo4j_entity_index_is_indexable_type($entity_type) {
  static $entity_types_to_index;

  if (!isset($entity_types_to_index)) {
    $entity_types_to_index = \Drupal::config('neo4j_entity_index.global')->get('entity_types');
  }

  return in_array($entity_type, $entity_types_to_index);
}
