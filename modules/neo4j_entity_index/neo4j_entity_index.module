<?php
/**
 * @file
 */

function neo4j_entity_index_neo4j_connector_index_info() {
  return array(
    'entity' => array(
      'label' => t('Entity index'),
      'class' => 'Drupal\neo4j_entity_index\Neo4JEntityIndexer',
    ),
  );
}

function neo4j_entity_index_batch_op_mark_for_index($entity_type, $entity_id_key, &$context) {
  if (empty($context['sandbox'])) {
    $context['sandbox']['progress'] = 0;

    $count_query = \Drupal::entityQuery($entity_type);
    $context['sandbox']['count'] = $count_query->count()->execute();
  }

  // @todo add not-in-() using the existing indexed ids.

  $query = \Drupal::entityQuery($entity_type);
  $query->range($context['sandbox']['progress'], NEO4J_CONNECTOR_REINDEX_LIMIT);
  $query->sort($entity_id_key);
  $result = $query->execute();

  foreach ($result as $entity_id) {
    neo4j_connector_index_send_to_index('entity', "$entity_type:$entity_id");
    $context['sandbox']['progress']++;
  }

  $context['message'] = t('@current out of @total @type entity have been marked in the index.', array(
    '@current' => $context['sandbox']['progress'],
    '@total' => $context['sandbox']['count'],
    '@type' => $entity_type,
  ));
  $finished = $context['sandbox']['count'] == 0 ? 1 : $context['sandbox']['progress'] / $context['sandbox']['count'];
  $context['finished'] = $finished;
}
